# -*- coding: utf-8 -*-
"""hasini_intern.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DVX8fw7TnSaS_34e5xnxxiucX-7R3TVw
"""

!pip install pypdf2 transformers
!pip install datasets

import PyPDF2
from PyPDF2 import PdfReader
from transformers import pipeline
from transformers import T5ForConditionalGeneration, T5Tokenizer

def extract_text_from_pdf(pdf_path):
    """Extract text from a PDF file."""
    text = ""
    with open(pdf_path, 'rb') as file:
        reader = PdfReader(file)
        for page in reader.pages:
            text += page.extract_text()
    return text

def extract_theme(text):
    # Extract the theme by searching for keywords or phrases related to the movie's theme
    # For now, let's return the first paragraph containing the word "theme"
    start_index = text.lower().find("theme")
    end_index = text.find("\n\n", start_index)  # Assume theme is followed by a new paragraph
    theme = text[start_index:end_index].strip() if start_index != -1 else "Theme not found"
    return theme

def analyze_characters(text):
    """Analyze characters based on their names and occurrences in the text."""
    characters = set()  # Using a set to store unique character names
    lines = text.split("\n")
    for line in lines:
        # Check if the line contains a single word or is in all capital letters
        if len(line.strip().split()) == 1 or line.strip().isupper():
            characters.add(line.strip())
    return list(characters)


def count_male_female_characters(text, characters):
    """Count the occurrences of male and female pronouns in the text."""
    male_count = 0
    female_count = 0
    text_lower = text.lower()
    for character in characters:
        character_lower = character.lower()
        if " " + character_lower + " " in text_lower:  # Check if character is mentioned in the text
            # Check if male pronouns are mentioned in the character's conversations
            male_count += text_lower.count(" he " + character_lower + " ") + \
                          text_lower.count(" him " + character_lower + " ") + \
                          text_lower.count(" his " + character_lower + " ")
            # Check if female pronouns are mentioned in the character's conversations
            female_count += text_lower.count(" she " + character_lower + " ") + \
                            text_lower.count(" her " + character_lower + " ") + \
                            text_lower.count(" hers " + character_lower + " ")
    return male_count, female_count


def pass_bechdel_test(text, characters):
    """Check if the script passes the Bechdel test by searching for conversations between named female characters."""
    female_characters = [char for char in characters if char.isupper()]  # Assuming character names are in uppercase
    for i in range(len(female_characters)):
        for j in range(i + 1, len(female_characters)):
            female1 = female_characters[i].lower()
            female2 = female_characters[j].lower()
            conversation = text.lower().split(female1)[1].split(female2)[0]  # Extract conversation between the two females
            if not any(word in conversation for word in [" he ", " him ", " his "]):
                return True  # Found a conversation between two women without mentions of men
    return False  # No such conversation found



def analyze_character_role(text, character):
    """Analyze the role of a character based on their presence and context in the text."""
    job_keywords = {
        "Police officer/Detective": ["cop", "detective", "police", "investigator"],
        "Medical professional": ["doctor", "medic", "physician", "nurse"],
        # Add more roles and their associated keywords as necessary
    }

    if character in text:
        # Find all occurrences of the character in the text
        character_indices = [i for i, char in enumerate(text.splitlines()) if char.strip() == character]
        for index in character_indices:
            # Get surrounding lines to analyze the context
            surrounding_lines = text.splitlines()[max(0, index - 5):min(len(text.splitlines()), index + 6)]
            surrounding_text = ' '.join(surrounding_lines)

            # Check for keywords indicating the character's role
            for role, keywords in job_keywords.items():
                if any(keyword in surrounding_text.lower() for keyword in keywords):
                    return role

    return "Role not specified"


def analyze_main_characters(text):
    """Analyze characters based on their names and occurrences in the text."""
    character_counts = {}
    lines = text.split("\n")
    for line in lines:
        # Check if the line contains a single word or is in all capital letters
        if len(line.strip().split()) == 1 or line.strip().isupper():
            character_name = line.strip()
            character_counts[character_name] = character_counts.get(character_name, 0) + 1

    # Sort character names by their occurrence counts in descending order
    sorted_characters = sorted(character_counts.items(), key=lambda x: x[1], reverse=True)

    # Return names of characters that are mentioned most frequently
    most_common_characters = [character for character, count in sorted_characters if count == sorted_characters[0][1]]

    return most_common_characters

# Example usage:
# most_common_characters = analyze_characters(pdf_text)



def search_and_generate_answer(query, text):
    qa_pipeline = pipeline('question-answering', model='t5-small')
    answer = qa_pipeline(question=query, context=text)
    return answer['answer']

def main():
    # Load PDF text
    pdf_path = '/content/blade runner 2049.pdf'
    pdf_text = extract_text_from_pdf(pdf_path)

    # Load T5 model and tokenizer
    model_name = 't5-small'  # You can adjust the model size based on your requirements
    model = T5ForConditionalGeneration.from_pretrained(model_name)
    tokenizer = T5Tokenizer.from_pretrained(model_name)

    # Original queries
    queries = [
        "Explain the theme of the movie?",
        "Who are the main characters?",
        "How many male and female characters are in the movie?",
        "Does the script pass the Bechdel test?",
        "What is the role of Deckard in the movie?"
    ]

    # Generate answers
    for query in queries:
        inputs = tokenizer.encode("question: " + query + " context: " + pdf_text, return_tensors="pt", max_length=512, truncation=True)
        outputs = model.generate(inputs)
        answer = tokenizer.decode(outputs[0], skip_special_tokens=True)


        characters = analyze_characters(pdf_text)
        # Post-processing for each query
        if "theme of the movie" in query.lower():
            theme = extract_theme(pdf_text)
            print(f"Query: {query}")
            print(f"Answer: {theme}")
        elif "main characters" in query.lower():
            most_common_characters = analyze_characters(pdf_text)
            print(f"Query: {query}")
            print(f"Answer: {most_common_characters}")
        elif "male and female characters" in query.lower():
            male_count, female_count = count_male_female_characters(pdf_text, characters)
            print(f"Query: {query}")
            print(f"Answer: Male characters: {male_count}, Female characters: {female_count}")
        elif "bechdel test" in query.lower():
            bechdel_test_result = pass_bechdel_test(pdf_text, characters)
            print(f"Query: {query}")
            print(f"Answer: {bechdel_test_result}")
        elif "role of deckard" in query.lower():
            deckard_role = analyze_character_role(pdf_text, "Deckard")
            print(f"Query: {query}")
            print(f"Answer: {deckard_role}")
        else:
            print(f"Query: {query}")
            print(f"Answer: {answer}")

        print()



if __name__ == "__main__":
    main()

